<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article lang="sk">
  <articleinfo>
    <title>Vývoj cmdletov pre PowerShell v prostredí SharpDevelop</title>

    <author>
      <firstname>Róbert</firstname>

      <surname>Novotný</surname>
    </author>
  </articleinfo>

  <section>
    <title>Prečo cmdlety?</title>

    <para>Skriptovacie možnosti PowerShellu sú dostatočne silné na to, aby
    bolo možné v jeho skriptovacom jazyku napísať takmer akúkoľvek činnosť.
    Existuje mnoho prípadov, keď namiesto komplikovaných skriptov chceme
    využiť svoje znalosti C# alebo iného programovacieho jazyka na platforme
    .NET a vyvinúť si vlastný cmdlet, ktorý realizuje jednu konkrétnu
    špecifickú úlohu. Náš kód sa v niektorých situáciách zjednoduší a
    sprehľadní.</para>

    <para>V tomto tutoriále si ukážeme, ako možno vytvoriť vlastný jednoduchý
    cmdlet typu "Ahoj svet". Nebudeme však používať komplexné prostredie
    Visual Studia.NET, ale využijeme bezplatné alternatívne prostredie
    <productname>SharpDevelop</productname>, ktoré úplne postačí na riešenie
    tejto úlohy.</para>
  </section>

  <section>
    <title>SharpDevelop</title>

    <para><ulink
    url="http://www.icsharpcode.net/OpenSource/SD/Download/">SharpDevelop</ulink>
    je prostredie na vývoj aplikácií v .NET. Nie je také mocné, ani neponúka
    toľko predpripravených šablón a nástrojov ako Visual Studio.NET, ale zato
    je bezplatné a nie sú s ním spojené žiadne špecifické obmedzenia. K
    októbru 2011 vyšla verzia 4.1 dostupná z <ulink
    url="http://www.icsharpcode.net/OpenSource/SD/Download/#SharpDevelop4x">produktových
    stránok</ulink>.</para>

    <para>Pred inštaláciou sa uistíme, že máme vo Windowse nainštalovaný .NET
    Framework verzie 3.5 SP1 (dostupné <ulink
    url="http://www.microsoft.com/downloads/details.aspx?familyid=ab99342f-5d1a-413d-8319-81da479ab0d7&amp;displaylang=en">z
    webu Microsoftu</ulink>) a zároveň .NET verzie 4.0 (opäť dostupné <ulink
    url="http://www.microsoft.com/downloads/details.aspx?FamilyID=0a391abd-25c1-4fc0-919f-b21f31ab88b7&amp;displaylang=en">z
    webu Microsoftu</ulink>). Inštalátor totiž kontroluje verzie až po voľbe
    súčastí, ktoré majú byť nainštalované, čo môže byť pomerne otravné.<note>
        <para>Na rozdiel od sveta Javy v .NET Frameworku nie vždy platí, že
        inštalácia novšej verzie v sebe automaticky nesie aj moduly staršej
        verzie. .NET Framework podporuje nezávislé moduly a aplikácia si môže
        vyžiadať použitie knižnice, či modulu (v terminológii .NET
        <foreignphrase>assembly</foreignphrase>) konkrétnej verzie.</para>
      </note></para>

    <para>Po spustení <productname>SharpDeveloper</productname>a vytvoríme
    nový <foreignphrase>solution</foreignphrase>.<note>
        <para><foreignphrase>Solution</foreignphrase> v .NET terminológii
        zodpovedá skupine projektov, ktoré dohromady vyprodukujú spustiteľnú
        aplikáciu. V samotnej Jave neexistuje analógia tohto konceptu -- jeho
        realizácia obvykle záleží na použitom IDE.</para>
      </note></para>

    <para>Z ponuky zvolíme <foreignphrase>solution</foreignphrase> v jazyku C#
    a použijeme možnosť <guilabel>Class Library</guilabel>. Samotný
    skompilovaný cmdlet totiž naozaj nie je nič iné než bežná knižnica
    (DLL).<figure>
        <title>Vytvorenie nového
        <foreignphrase>solution</foreignphrase></title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="new-solution.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure></para>

    <para><foreignphrase>Solution</foreignphrase> nazvime inteligentným
    spôsobom, napr. <guilabel>HelloWorldCmdlets</guilabel> a vyberme z
    rozbaľovacieho menu profil <guilabel>.NET Framework
    3.0</guilabel>.<warning>
        <para>Voľba staršej verzie je veľmi podstatná!
        <productname>SharpDevelop</productname> nám implicitne ponúkne verziu
        .NET 4.0, s ktorou PowerShell 2 nie je kompatibilný. Ranou istoty je
        použiť .NET 3.0, či 3.5 alebo ešte starší.</para>
      </warning></para>

    <para><productname>SharpDevelop</productname> automaticky vytvorí prvú
    triedu v mennom priestore <token>HelloWorldCmdlets</token>, ktorá po
    odstránení komentárov vyzerá nasledovne:<programlisting>using System;
using System.Collections.Generic;

namespace HelloWorldCmdlets
{
	public class MyClass
	{
		
	}
}</programlisting></para>

    <para>Samotný cmdlet vytvoríme v nasledovnom kroku:</para>
  </section>

  <section>
    <title>Zavedenie <foreignphrase>assemblies</foreignphrase></title>

    <para>Samotná tvorba cmdletov sa nijak mimoriadne nelíši od tvorby
    akejkoľvej inej DLL knižnice. Podobne za cmdletom netreba hľadať žiadnu
    mágiu: cmdlet je trieda, ktorá dedí od rodičovskej triedy
    <classname>System.Management.Automation.PSCmdlet</classname> a prekrýva
    jej metódy. Na to, aby sme vedeli použiť túto rodičovskú triedu v našom
    projekte, musíme doň zaviesť referenciu na
    <foreignphrase>assembly</foreignphrase>, ktorá ju obsahuje.<note>
        <para>V Jave je obvyklé stiahnuť JAR s knižnicou, a vložiť ho do
        CLASSPATH, čím budeme mať k dispozícii všetky jej triedy. Keďže .NET
        podporuje verzionované knižnice, musíme zaviesť referenciu (odkaz) na
        konkrétnu knižnicu v danej verzii - inými slovami, zaviesť referenciu
        na konkrétne <foreignphrase>assembly.</foreignphrase></para>
      </note></para>

    <para>Z menu <guimenuitem>Project</guimenuitem> vyberme <guimenuitem>Add
    Reference</guimenuitem> a pridajme referenciu na uvedenú
    <foreignphrase>assembly</foreignphrase>:</para>

    <figure>
      <title>Pridanie odkazu na
      <foreignphrase>assembly</foreignphrase></title>

      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="add-reference.png" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>

    <para>Pridanie <foreignphrase>assembly</foreignphrase> vieme overiť v
    strome projektu, v uzle <guilabel>References</guilabel>.<figure>
        <title>Pridaná <foreignphrase>assembly</foreignphrase></title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="inserted-reference-to-system-management-automation.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure></para>
  </section>

  <section>
    <title>Tvorba cmdletu</title>

    <section>
      <title>Tvorba prázdneho cmdletu</title>

      <para>Teraz, keď sme zaviedli všetky požadované
      <foreignphrase>assemblies</foreignphrase>, môžeme dopracovať náš cmdlet.
      Odstráňme z projektu súbor <filename>MyClass.cs</filename> a namiesto
      neho vytvorme nový súbor pre triedu (<guimenuitem>File</guimenuitem> |
      <guimenu>New...</guimenu> | <guimenuitem>File...</guimenuitem>. |
      <guimenuitem>C# File</guimenuitem> a potvrdíme snahu vytvoriť súbor v
      projekte.) Súbor nazveme <filename>HelloWorldCmdlet</filename> a vložíme
      doňho nasledovný obsah:<programlisting>using System;
using System.Management.Automation;

namespace HelloWorldCmdlets
{
	[Cmdlet(VerbsCommon.Get, "Hello")]
	public class HelloWorldCmdlet : PSCmdlet
	{
		
	}
}
</programlisting></para>

      <para>Trieda dedí od rodičovskej triedy
      <classname>System.Management.Automation.PSCmdlet</classname>. To však
      nie je všetko - cmdlet musí byť označený atribútom
      <classname>CmdletAttribute</classname>, ktorý špecifikuje názov cmdletu,
      pod ktorým sa sprístupní v prostredí PowerShellu. </para>

      <para>Konvencia káže, aby každý cmdlet mal názov pozostávajúci zo
      slovesa a podstatného mena a nie je dôvod ju nedodržať. Náš cmdlet sa
      sprístupní pod menom <token>Get-Hello</token>.</para>

      <note>
        <para>Všimnime si niekoľko syntaktických rozdielov oproti
        Jave.<itemizedlist>
            <listitem>
              <para>Namiesto deklarácie <token>import</token> používame na ten
              istý účel deklaráciu <token>using</token>.</para>
            </listitem>

            <listitem>
              <para>V C# sa môže v rámci jedného súboru nachádzať i viacero
              tried poskytnutých v rámci bloku <token>namespace</token>, ktorý
              je ekvivalentom balíčka (<foreignphrase>package</foreignphrase>)
              v Jave.</para>
            </listitem>

            <listitem>
              <para>Dedičnosť tried nezapisujeme kľúčovým slovom
              <token>extends</token>, ale prostou dvojbodkou.</para>
            </listitem>

            <listitem>
              <para>Atribúty sú .NETovským protipólom anotácií v Jave.
              Namiesto zavináčovej notácie ich uvádzame do hranatých
              zátvoriek.</para>
            </listitem>
          </itemizedlist></para>
      </note>

      <note>
        <para>Atribút <token>CmdletAttribute</token> potrebuje dva reťazce:
        sloveso a podstatné meno. Názov slovesa prevezmeme zo statickej
        inštančnej premennej triedy <classname>VerbsCommon</classname>, ktorá
        môže slúžiť ako vzor typicky používaných slovies.</para>
      </note>
    </section>

    <section>
      <title>Prekrytie metódy</title>

      <para>Na to, aby cmdlet robil niečo zmysluplné, je potrebné prekryť
      niektorú z metód rodičovskej triedy. Základnou metódou je
      <methodname>ProcessRecord()</methodname>, ktorá sa zavolá jedenkrát pre
      každý objekt, ktorý príde z rúry do cmdletu. Ak z rúry prichádza napr. 5
      objektov, metóda sa zavolá päťkrát. </para>

      <para>Dodajme túto metódu do cmdletu a dosiahnime tým najjednoduchšiu
      možnú funkcionalitu: tzv. "Hello World". Cmdlet nech do rúry pošle jeden
      pozdravný reťazec. Na zápis objektu do rúry použijeme rodičovskú metódu
      <methodname>WriteObject().</methodname><programlisting>using System;
using System.Management.Automation;

namespace HelloWorldCmdlets
{
	[Cmdlet(VerbsCommon.Get, "Hello")]
	public class HelloWorldCmdlet : PSCmdlet
	{
		protected override void ProcessRecord()
		{
			WriteObject("Hello World");
		}
		
	}
}

</programlisting></para>

      <note>
        <para>Na rozdiel od Javy treba prekryté metódy explicitne označiť
        kľúčovým slovom <token>override</token>.</para>
      </note>

      <note>
        <para>Ak hľadáte analógiu funkcie <foreignphrase>Override and
        implement methods</foreignphrase> z Eclipse, hľadáte v menu márne.
        Prekryť metódu môžete pomocou funkcie
        <foreignphrase>autocomplete</foreignphrase> iným spôsobom: uveďte do
        triedy kľúčové slovo <token>override</token>, a po stlačení
        <keycode>Ctrl+Enter</keycode> vám
        <productname>SharpDevelop</productname> ponúkne zoznam rodičovských
        metód určených na prekrytie.</para>

        <figure>
          <title>Automatické dopĺňanie prekrytých metód</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="override-autocomplete.png" />
            </imageobject>
          </mediaobject>
        </figure>
      </note>
    </section>
  </section>

  <section>
    <title>Vytvorenie inštalátora</title>

    <para>Na to, aby sme mohli cmdlet použiť v prostredí PowerShellu,
    potrebujeme obaliť triedu cmdletu do zásuvného modulu, tzv.
    <firstterm>snap-in</firstterm>u. Jeden
    <foreignphrase>snap-in</foreignphrase> môže obsahovať i viacero cmdletov,
    či providerov, ktoré možno naraz zaviesť do prostredia.</para>

    <para>Snap-in je opäť bežná trieda dediaca od
    <classname>System.Management.Automation.PSSnapIn</classname>, s povinným
    atribútom <classname>RunInstallerAttribute</classname> a povinným
    poskytnuté nasledovných
    <foreignphrase>properties</foreignphrase><itemizedlist>
        <listitem>
          <para><varname>Name</varname>: zmysluplný názov snap-inu</para>
        </listitem>

        <listitem>
          <para><varname>Vendor</varname>: poskytovateľ snap-inu, obvykle
          názov spoločnosti autora.</para>
        </listitem>

        <listitem>
          <para><varname>Description</varname>: používateľsky prítulný popis
          snap-inu</para>
        </listitem>
      </itemizedlist></para>

    <para>Snap-in musí mať zároveň povinný atribút
    <classname>RunInstallerAttribute</classname>, ktorý indikuje spustenie
    inštalátora pri nasadzovaní snap-inu do prostredia.</para>

    <programlisting>	[RunInstaller(true)]
	public class HelloWorldSnapIns : PSSnapIn
	{
		public override string Name {
			get {
				return "HelloWorldSnapIns";
			}
		}
		
		public override string Description {
			get {
				return "A sample snap-in with Hello World message.";
			}
		}
		
		public override string Vendor {
			get {
				return "UINF PF UPJS";
			}
		}
	}</programlisting>

    <note>
      <para>Na rozdiel od Javy v C# nie je tradícia getterov a setterov v
      podobe metód. Zvyklosťou je pristupovať k inštančným premenným pomocou
      vlastností (<foreignphrase>properties</foreignphrase>), ktoré tvária ako
      priamo viditeľné verejné inštančné premenné. Ak potrebujeme pristúpiť k
      premennej pomocou metódy (ako v príklade), použijeme na to syntax
      <token>get</token>, resp. <token>set</token>, ako vidíme v príklade
      <foreignphrase>properties</foreignphrase> <token>Name</token>,
      <token>Description</token> a <token>Vendor</token>.</para>
    </note>

    <para>V tejto chvílu už môžeme projekt zostaviť: <guimenu>Build</guimenu>
    | <guibutton>Build Solution</guibutton>. Pri prvom pokuse získame
    chybu:</para>

    <para><computeroutput>The type 'System.Configuration.Install.Installer' is
    defined in an assembly that is not referenced. You must add a reference to
    assembly 'System.Configuration.Install, Version=2.0.0.0, Culture=neutral,
    PublicKeyToken=b03f5f7f11d50a3a'. (CS0012) -
    C:\Users\rn\Documents\SharpDevelop
    Projects\HelloWorldCmdlets\HelloWorldCmdlets\HelloWorldCmdlet.cs:18,15</computeroutput></para>

    <para>Do projektu musíme pridať <foreignphrase>assembly</foreignphrase>
    <classname>System.Configuration.Install.Installer</classname> podobne, ako
    sme to robili v prvom kroku.</para>

    <para>Teraz už zostavenie prebehne bez problémov a v adresári projektu sa
    objaví súbor DLL s knižnicou. Na našom stroji sa nachádza v adresári
    <filename>c:\Users\novotnyr\Documents\SharpDevelop
    Projects\HelloWorldCmdlets\HelloWorldCmdlets\bin\Debug\HelloWorldCmdlets.dll</filename>.</para>
  </section>

  <section>
    <title>Zavedenie do PowerShellu</title>

    <para>Spustíme PowerShell a presunieme sa do adresára s DLL súborom.
    Pomocou cmdletu <token>Import-Module</token> zavedieme snap-in do
    prostredia.</para>

    <programlisting width="80">PS C:\Users\novotnyr\Documents\SharpDevelop Projects\HelloWorldCmdlets\HelloWorldCmdlets\bin\Debug&gt; Import-Module .\HelloWorldCmdlets.dll</programlisting>

    <warning>
      <para>Cmdlet <token>Import-Module</token> potrebuje absolútnu alebo
      relatívnu cestu k DLL súboru. Bodka a lomka na začiatku sa odkazujú na
      aktuálny adresár. V prípade, že ju vynecháme, bude importovací cmdlet
      protestovať, že nevie nájsť náš modul.</para>
    </warning>

    <para><warning>
        <para>Ak získame chybu:</para>

        <para><computeroutput>Import-Module : Could not load file or assembly
        'file:///C:\Users\novotnyr\Documents\SharpDevelop\Projects\HelloWorldCmdlets\HelloWorldCmdlets\bin\Debug\HelloWorldC
        mdlets.dll' or one of its dependencies. This assembly is built by a
        runtime new er than the currently loaded runtime and cannot be loaded.
        At line:1 char:14 + Import-Module &lt;&lt;&lt;&lt;
        .\HelloWorldCmdlets.dll + CategoryInfo : NotSpecified: (:)
        [Import-Module], BadImageForma tException + FullyQualifiedErrorId :
        System.BadImageFormatException,Microsoft.PowerSh
        ell.Commands.ImportModuleCommand</computeroutput></para>

        <para>znamená to, že sme pri vytváraní projektu nastavili príliš novú
        verziu .NET Frameworku.</para>
      </warning>Overiť prítomnosť snap-inu v prostredí môžeme cmdletom
    <command>Get-Module</command>, ktorý vypíše všetky snap-iny a cmdlety,
    ktoré dávajú k dispozícii.</para>

    <para>V tejto chvíli už nič nebráni priamo spustiť z prostredia náš cmdlet
    <command>Get-Hello</command> a obdivovať výpis, ktorý sme
    zadeklarovali.<figure>
        <title>Inštalácia, overenie a použitie cmdletu</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="import-get-run.png" />
          </imageobject>
        </mediaobject>
      </figure></para>
  </section>

  <section>
    <title>Rekompilácia po zmene</title>

    <para>Po zmene súboru musíme zatvoriť PowerShell, prebudovať projekt v
    <productname>SharpDevelop</productname>e a použitím
    <command>Install-Module</command> ho opäť zaviesť do prostredia a
    otestovať. Najlepší spôsob, akým zrýchliť túto nezáživnú činnosť, je
    vytvoriť si vlastný powershellovský skript.</para>
  </section>
</article>
