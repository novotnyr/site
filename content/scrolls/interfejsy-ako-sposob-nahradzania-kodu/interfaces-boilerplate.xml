<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>Interfejsy ako spôsob nahrádzania kódu</title>
  </articleinfo>

  <section>
    <title>Súbory v Jave sú zložité!</title>

    <para>Ak ste niekedy programovali v Pascale, iste ste si pamätali veľmi
    jednoduchý spôsob, ako načítavať riadky z textového súboru. Jedným volaním
    procedúry ste asociovali premennú so súborom, druhým ho otvorili na
    čítanie a vo <token>while</token>-cykle načítavali dáta pomocou starej
    známej funkcie <function>readln()</function>. Hja, procedurálne
    programovanie malo niekedy svoje výhody. V Jave je práca so súbormi o
    niečo komplikovanejšia -- veď len triviálny príklad vyzerá
    nasledovne:</para>

    <programlisting language="java">package sk.test;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Subory {
	public static void main(String[] args) throws FileNotFoundException {
		File file = new File("data.txt");
		Scanner scanner = new Scanner(file);
		while(scanner.hasNextLine()) {
			String line = scanner.nextLine();
			System.out.println(line);
		}
		scanner.close();
	}
}</programlisting>

    <para>V tomto príklade sme dokonca ani neriešili výnimky, čo je
    poľutovaniahodné -- správny program by vyžadoval jeden
    <token>try-catch</token>-blok, kde vo <token>finally</token> sekcii
    uzavrieme inštanciu <classname>Scanner</classname>a. Aká to „hrôza“ oproti
    Pascalu, nehovoriac o skriptovacích jazykoch typu Groovy, kde ekvivalentný
    kód vyzerá nasledovne:</para>

    <programlisting>def f = new File("data.txt")
f.eachLine{
  println it
}</programlisting>

    <para>Ak by sme v príklade chceli namiesto všetkých riadkov vypísať len
    tie, ktoré začínajú veľkým písmenom, Java kód by vyzeral takmer identicky:
    rozdiel by spočíval v odlišnom kóde vo vnútri <token>while</token>-cyklu.
    Ak vyextrahujeme kód z metódy <methodname>main()</methodname> do metódy
    novozaloženej triedy <classname>FileUtils</classname>, situácia bude
    nasledovná:</para>

    <programlisting language="java">package sk.test;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class FileUtils {
	public void printAllLines(File file) throws FileNotFoundException {
		Scanner scanner = null;
		try {
			scanner = new Scanner(file);
			while(scanner.hasNextLine()) {
				String line = scanner.nextLine();
				System.out.println(line);
			}
			scanner.close();
		} finally {
			if(scanner != null) {
				scanner.close();
			}
		}		
	}
}</programlisting>

    <para>Metóda na výpis riadkov začínajúcich veľkým písmenom
    <methodname>printAllLinesStartingWithUpperCase()</methodname> bude úplne
    identická, vo vnútri však pribudne jeden <token>if</token>.</para>

    <para>Čo je na tom najhoršie? Z trinástich riadkov metódy je dôležitý len
    jeden (resp. dva, či tri) riadok, a ostatné predstavujú obslužný kód,
    slangovo nazývaný <foreignphrase>boilerplate code</foreignphrase>.
    Nedôležité veci sa dookola kopírujú a tie dôležité sa strácajú v záplave
    nepodstatností.</para>

    <para>Existuje však možnosť, ako si túto úlohu uľahčiť: a spočíva
    <emphasis role="bold">v použití interfejsov</emphasis>.</para>

    <sidebar>
      <title>Etymológia</title>

      <para><foreignphrase>Boilerplate</foreignphrase> je pôvodne pomenovanie
      pevného oceľového plechu, z ktorého sa vyrábali kotly (koniec-koncov,
      pojem bojler je známy aj u nás). Tento plech mal však aj inú funkciu --
      razili sa doň texty, ktoré sa dali používať pri mnohých príležitostiach,
      napr. univerzálne upozornenia, či oznamy. Namiesto komplikovanej sadzby
      stačilo odtlačiť text vyrazený na plechu a bolo. Súčasnou analógiou
      <foreignphrase>boilerplate</foreignphrase> textov sú niekoľkovetné
      popisky opisujúce firmu spätú s konkrétnym produktom alebo stručné
      charakteristiky autora umiestňované pod články.
      <foreignphrase>Boilerplate</foreignphrase> kód má teda vlastnosti
      opakovateľnosti, pravidelného používania pri tých istých situáciách.
      Píše sa len raz a pri ostatných použitiach sa doslova kopíruje.</para>
    </sidebar>

    <figure>
      <title>Sivá farba ukazuje je <foreignphrase>boilerplate</foreignphrase>,
      farby reprezentujú dôležitý kód.</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="boilerplate.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Interfejsy ako cesta k zmenšeniu boilerplate kódu</title>

    <para>Začiatočníci považujú interfejsy za ťažko uchopiteľné (zrejme je
    príčinou zložité vysvetlenie), a dokonca málo používané. V Jave však bez
    nich ďaleko nezájdeme -- nehovoriac o tom, že i vo všeobecnom objektovo
    orientovanom programovaní na nich stojí nejeden návrhový vzor.</para>

    <para>Návrhom interfejsu predovšetkým určíme sadu chovania, teda <emphasis
    role="bold">čo</emphasis> (akú funkcionalitu) od neho klient bude
    očakávať. To, <emphasis role="bold">ako</emphasis> sa interfejs bude v
    danej situácii správať, je ponechané na triedy, ktoré budú tento interfejs
    implementovať. Vezmime si náš príklad, presnejšie algoritmus, ktorý v ňom
    používame. Ten sa dá slovne popísať nasledovne:</para>

    <orderedlist>
      <listitem>
        <para>otvor súbor</para>
      </listitem>

      <listitem>
        <para>postupne prechádzaj všetky riadky</para>
      </listitem>

      <listitem>
        <para>s každým riadkom <emphasis role="bold">niečo</emphasis>
        urob</para>
      </listitem>

      <listitem>
        <para>uprac po sebe</para>
      </listitem>
    </orderedlist>

    <para>Rozdiel medzi našimi dvoma metódami (vypíš všetky riadky, vs. vypíš
    riadky začínajúce veľkými písmenami) spočíva v odlišnom správaní v kroku
    3. V našom obrázku sú prvé dva kroky opticky v hornej sivej ploche, krok
    3. je zelená plocha a štvrtý krok je obsiahnutý v spodnom sivom obdĺžniku.
    Všimnime si, že v treťom kroku máme len všeobecné tvrdenie „s každým
    riadkom <emphasis role="bold">niečo </emphasis>urob“. To sa podobá na
    očakávania, ktoré by sme vedeli špecifikovať v interfejsi. Ako konkrétne
    sa s daným riadkom vysporiadame, záleží od triedy, ktorá bude náš
    interfejs implementovať. Prepíšme si to do kódu, tentokrát do metódy
    <methodname>handleLines(File)</methodname>:</para>

    <programlisting language="java">public class FileUtils {
	public void handleLines(File file) throws FileNotFoundException {
		Scanner scanner = null;
		try {
			scanner = new Scanner(file);
			while(scanner.hasNextLine()) {
				String line = scanner.nextLine();

				// urob niečo s riadkom

			}
			scanner.close();
		} finally {
			if(scanner != null) {
				scanner.close();
			}
		}		
	}
}</programlisting>

    <para>Vágny popis „urob niečo s riadkom“ vieme nahradiť volaním nejakej
    fiktívnej metódy inštancie <varname>lineHandler</varname> zatiaľ
    nenavrhnutej triedy <classname>LineHandler</classname>. Táto metóda si
    vystačí s jediným parametrom typu <classname>String</classname>, v ktorom
    príde aktuálne spracovávaný riadok.</para>

    <para>Máme teda potenciálneho kandidáta na triedu, pri ktorom vieme, čo od
    neho chceme. Naše želanie je <quote>chcem triedu, ktorá mi spracuje
    riadok</quote>. To bohate stačí na to, aby sme vedeli vytvoriť interfejs
    <interfacename>LineHandler</interfacename>, ktorý naše želanie špecifikuje
    v programovacom jazyku:</para>

    <programlisting language="java">public interface LineHandler {
	public void String handle(String line);
}</programlisting>

    <para>Naozaj tam nie je nič zložité -- máme predpis pre triedu, ktorá
    spracuje riadok. Nevieme síce ako sa to spraví, ale v rámci triedy
    <classname>FileUtils</classname>, ktorá obsahuje metódy pre prácu so
    súbormi, to nie je dôležité. V metóde <classname>handleLines()</classname>
    triedy <classname>FileUtils</classname> len povieme, <emphasis
    role="bold">čo</emphasis> chceme a <emphasis role="bold">ako</emphasis> sa
    to spraví, záleží od implementácie interfejsu. V kóde tento interfejs
    použijeme nasledovne:</para>

    <programlisting>while(scanner.hasNextLine()) {
	String line = scanner.nextLine();
	// urob niečo s riadkom
	lineHandler.handle(line);
}</programlisting>

    <para>V kóde je ešte jedna nejasnosť: odkiaľ sa zjavila premenná
    <varname>lineHandler</varname>? Prirodzené miesto, kde ju môžeme uviesť,
    je parameter metódy <methodname>handleLines()</methodname> v triede
    <classname>FileUtils</classname>.</para>

    <programlisting language="java">public class FileUtils {
	public void handleLines(File file, LineHandler lineHandler)
		throws FileNotFoundException 
	{
	...	
	}
}</programlisting>

    <para>Dva parametre sú v tomto prípade úplne prirodzené: prvý hovorí,
    ktorý súbor sa má spracovať, a druhý vraví, čo sa má stať s každým
    riadkom.</para>

    <section>
      <title>Výpis riadkov cez interfejs</title>

      <para>Dosiaľ sme stále vraveli, <emphasis role="bold">čo</emphasis>
      chceme s každým riadkom spraviť, ale nikde sme neuviedli <emphasis
      role="bold">ako</emphasis> sa s riadkami vysporiadame. Teraz je na to
      správna chvíľa. Konkrétny spôsob bude záležať od implementácií, teda od
      konkrétnych tried, ktoré budú implementovať interfejs
      <classname>LineHandler</classname>.</para>

      <para>Dajme si triviálny príklad, ktorý spraví presne to, čo kód na
      úplnom začiatku článku, čiže vypíše riadky na konzolu.</para>

      <programlisting language="java">public class SysoutLineHandler implements LineHandler {
	public void handleLine(String line) {
		System.out.println(line);
	}
}</programlisting>

      <para>Máme triedu, ktorá implementuje interfejs (<code>implements
      LineHandler</code>) a v metóde <methodname>handleLine()</methodname>
      jasne uvádza, čo sa s riadkom stane: vypíše sa na konzolu. Trieda
      <classname>SysoutLineHandler</classname> teda hovorí, <emphasis
      role="bold">ako</emphasis> sa s riadkom vysporiadame.</para>

      <para>Použitie v kóde je zjavné: stačí si vytvoriť testovaciu triedu s
      metódou <methodname>main()</methodname> a v nej zavolať:</para>

      <programlisting language="java">public static void main(String... args) {
	FileUtils fileUtils = new FileUtils();
	LineHandler lineHandler = new SysoutLineHandler();
	File file = new File("data.txt");

	fileUtils.handleLines(file, lineHandler);
}</programlisting>

      <para>Inštancii triedy <classname>FileUtils</classname> sme podhodili
      dva parametre: jednak súbor <varname>file</varname> a jednak inštanciu
      triedy <classname>SysoutHandler</classname>, ktorá implementuje
      interfejs <classname>LineHandler</classname>. Priradenie na druhom
      riadku je správne, keďže implementácia interfejsu nie je nič iné než
      dedičnosť, a teda pokojne môžeme priradiť <quote>potomka</quote> typu
      <classname>SysoutHandler</classname> do predka typu
      <classname>LineHandler</classname>.</para>

      <para>Dva parametre hovoria <emphasis role="bold">na akých
      dátach</emphasis> budeme pracovať (teda na dátach zo súboru) a <emphasis
      role="bold">čo</emphasis> s nimi budeme robiť (vypisovať ich do
      súboru).</para>
    </section>

    <section>
      <title>Výpis riadkov začínajúcich veľkými písmenami</title>

      <para>Výpis riadkov, ktoré začínajú veľkými písmenami, je už hračka.
      Stačí vytvoriť samostatnú triedu
      <classname>UpperCaseStartingLineHandler</classname>, ktorá implementuje
      interfejs <classname>LineHandler</classname>, vytvoriť jej inštanciu,
      ktorú použijeme ako argument v metóde
      <methodname>FileUtils#handleLines()</methodname>:</para>

      <programlisting language="java">public class UpperCaseStartingLineHandler implements LineHandler {
	public void handleLine(String line) {
		if(line.length() &gt; 1 
			&amp;&amp; Character.isUpperCase(line.charAt(0))) 
		{
			System.out.println(line);
		}
	}
}</programlisting>

      <para>Prepojenie inštancií je analogické ako v predošlej stati, rozdiel
      spočíva vo vytvorení inej inštancie
      <classname>LineHandlera</classname>.</para>

      <programlisting language="java">public static void main(String... args) {
	FileUtils fileUtils = new FileUtils();
	LineHandler lineHandler = new UpperCaseStartingLineHandler();
	File file = new File("data.txt");

	fileUtils.handleLines(file, lineHandler);
}</programlisting>
    </section>

    <section>
      <title>Počítanie riadkov v súbore</title>

      <para>Na základe dvoch predlôh vieme vytvoriť aj tretí vzorový príklad,
      ktorý zistí počet riadkov v súbore.</para>

      <programlisting language="java">public class LineCountingHandler implements LineHandler {
	private int lines;

	public void handleLine(String line) {
		lines++;
	}

	public int getLines() {
		return lines;
	}
}</programlisting>

      <para>V tomto prípade sme dodali navyše jeden
      <foreignphrase>getter</foreignphrase>, ktorým získame počet riadkov v
      súbore. Použitie je v tomto prípade opäť analogické:</para>

      <programlisting language="java">public static void main(String... args) {
	FileUtils fileUtils = new FileUtils();
	LineCountingHandler lineHandler = new LineCountingHandler();
	File file = new File("data.txt");
	fileUtils.handleLines(file, lineHandler);
	
	System.out.println(lineHandler.getLines());
}</programlisting>

      <para>Rozdiel spočíva v tom, že pri vytváraní inštancie
      <varname>lineHandlera</varname> už nemôžeme na ľavej strane použiť
      interfejs, pretože by sme nemali prístup k metóde
      <varname>getLines()</varname> (nezabúdajme, že inštancia interfejsového
      typu má len tie metódy, ktoré sú uvedené v interfejse).</para>
    </section>
  </section>

  <section>
    <title>Vystrihovanie a lepenie kódu</title>

    <para>Odsun kódu do interfejsu si vieme predstaviť ako vystrihnutie kódu
    nožničkami.</para>

    <figure>
      <title>Lepenie kódu</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="lepenie-kodu.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Pôvodný kód v tmavozelenom obdĺžniku v metóde A vieme „vystrihnúť“ a
    samotný vystrižok považovať za implementáciu interfejsu.</para>

    <para>Do prázdnej medzery potom vieme vlepovať buď jednu alebo druhú
    implementáciu. <quote>Vlepovaním</quote> rôznych implementácii vieme
    dosahovať rozličnú funkcionalitu.</para>
  </section>

  <section>
    <title>Kde inde sa to používa</title>

    <para>Tento trik s kódom v interfejsi je často používaný i v základnom API
    Javy. Bežným príkladom je výpis súborov a adresárov, ktoré sa nachádzajú v
    adresári, ktorý je možné dosiahnuť pomocou metódy
    <methodname>java.io.File#listFiles()</methodname>. Chcete všetky súbory
    končiace sa na <token>.mp3</token>?</para>

    <programlisting language="java">File file = new File("C:/Windows");
for(File child : file.listFiles()) {
	if(child.getPath().endsWith(".mp3")) {
		System.out.println(child);
	}
}</programlisting>

    <para>Toto však možno získať aj alternatívnym spôsobom, ktorý je založený
    na vyššieuvedenej filozofii interfejsu.</para>

    <para>Metóda <methodname>listFiles()</methodname> má aj preťaženú verziu s
    parametrom typu <interfacename>FileFilter</interfacename>, ktorý nie je
    ničím iným než interfejsom s jedinou metódou. Tá pre každý jednotlivý
    súbor či podadresár vráti <token>true</token> v prípade, že sa má zahrnúť
    do výsledného poľa súborov. Vieme si teda nadefinovať viacero filtrov,
    ktoré potom dynamicky používame podľa toho, ako chceme vyfiltrovať súbory
    či podadresáre daného adresára.</para>

    <para>Ten istý príklad vieme napísať aj takto:</para>

    <programlisting language="java">public class Mp3Filter implements java.io.FileFilter {
	public boolean accept(File pathname) {
		return pathname.getPath().endsWith(".mp3");
	}
}
// ...
File file = new File("C:/Windows");
FileFilter mp3Filter = new Mp3Filter();
File[] mp3Files = file.listFiles(mp3Filter);</programlisting>

    <para>Vo výslednom poli <varname>mp3Files</varname> budeme mať len tie
    súbory, ktoré spĺňajú podmienku v metóde
    <methodname>Mp3Filter#accept()</methodname>.</para>
  </section>

  <section>
    <title>Filozofia interfejsov z funkcionálneho programovania</title>

    <para>Príklady o súboroch možno zovšeobecniť pre ľubovoľnú situáciu. Z
    matematického hľadiska ide totiž o situáciu, keď máme dáta (v podobe
    kolekcie), ktoré vyfiltrujeme pomocou predikátu (funkcie, ktorá vráti
    <token>true</token>/<token>false</token>). Interfejs
    <interfacename>FileFilter</interfacename> zodpovedá predikátu, ktorý pre
    každý súbor vráti <token>true</token>, ak ho treba ponechať vo výslednej
    kolekcii.</para>

    <para>Z matematického hľadiska ide o zápis <inlinegraphic
    fileref="predikat.png" valign="middle" />, kde <varname>Vstup</varname> je
    vstupná množina a <varname>Výsledok</varname> výsledná filtrovaná množina.
    (V zápise pre ignorujeme rozličné druhy kolekcie.)</para>

    <para>Pomocou interfejsu by sme to zapísali nasledovne:</para>

    <programlisting language="java">public interface Predicate&lt;T&gt; {
	public boolean evaluate(T variable);
}</programlisting>

    <para>Filtrujúca metóda, ktorá odstráni z kolekcie tie prvky, ktoré
    nespĺňajú pravdivostnú funkciu, by potom vyzerala nasledovne:</para>

    <programlisting language="java">public &lt;T&gt; Collection&lt;T&gt; filter(Collection&lt;T&gt; collection, Predicate&lt;T&gt; predicate) {
	Iterator&lt;T&gt; iterator = collection.iterator();
	while(iterator.hasNext()) {
		T element = iterator.next();
		// ak prvok nespĺňa pravdivostnú funkciu, vyhodíme ho
		if(!predicate.evaluate(element)) {
			iterator.remove();
		}
	}
	return collection;
}</programlisting>

    <para>Všimnime si, že metóda berie dve hodnoty: dáta
    (<varname>collection</varname>) a funkciu, ktorá sa má aplikovať na každý
    element v dátach.</para>

    <para>Ukážme si to na príklade -- z danej množiny vráťme len párne čísla.
    Najprv si definujme triedu pre pravdivostnú podmienku <quote>číslo je
    párne</quote>:</para>

    <programlisting language="java">public class EvenNumberPredicate implements Predicate&lt;Integer&gt;() {
	public boolean evaluate(Integer variable) {
		return variable % 2 == 0;
	}
}</programlisting>

    <para>Následne definujme vstupné dáta, na ktoré aplikujeme filter:</para>

    <programlisting language="java">Set&lt;Integer&gt; čísla = new HashSet&lt;Integer&gt;();
Collections.addAll(čísla, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

Predicate&lt;Integer&gt; filter = new EvenNumberPredicate();

Collection&lt;Integer&gt; párneČísla = CollectionUtils.filter(čísla, filter);</programlisting>

    <para>Výmenou triedy, ktorá implementuje
    <interfacename>Predicate</interfacename>, môžeme dynamicky meniť filtračnú
    podmienku.</para>
  </section>
</article>
